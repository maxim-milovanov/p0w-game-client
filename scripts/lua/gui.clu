function GetTextureID(texture_file)
	return CLU_Call("GetTextureID", texture_file)
end

function ARGB(a, r, g, b)
	return CLU_Call("ARGB", a, r, g, b)
end

function GetTerrainTextureID(terrain_id)
	local tex_id = CLU_Call("GetTerrainTextureID", terrain_id) 	
	if tex_id==0 then 
	  return nil 
	end
	return tex_id
end

function GetChaPhotoTexID(cha_id)

	local tex = CLU_Call("GetChaPhotoTexID", cha_id)
	if tex==0 then 
 	    return nil
	end
	return tex
end

function GetSceneObjPhotoTexID(obj_id)

	local tex = CLU_Call("GetSceneObjPhotoTexID", obj_id)
	if tex==0 then 
 	    return nil
	end
	return tex
end

function GetEffectPhotoTexID(eff_id)

	local tex = CLU_Call("GetEffectPhotoTexID", eff_id)
	if tex==0 then 
 	    return nil
	end
	return tex
end

function GetTerrainTextureType(terrain_id)
	local tex_id = CLU_Call("GetTerrainTextureType", terrain_id) 	
	if tex_id==-1 then 
	  return nil 
	end
	return tex_id
end


function GetSceneObjPhotoTexType(id)
	local tex_id = CLU_Call("GetSceneObjPhotoTexType", id) 	
	if tex_id==-1 then 
	  return nil 
	end
	return tex_id
end

function UI_CreateWindow(name, x, y, w, h)
	CLU_Call("UI_CreateWindow", name, x, y, w, h)
end



function UI_CreateButton(name, x, y, w, h, parent)
	CLU_Call("UI_CreateButton", name, x, y, w, h, parent)
end

function UI_SetButtonCheckBox(name, check)
	CLU_Call("UI_SetButtonCheckBox", name, check)
end

function UI_SetButtonGroup(name, group)
	CLU_Call("UI_SetButtonGroup", name, group)
end

function UI_SetButtonLabel(name, label)
	CLU_Call("UI_SetButtonLabel", name, label)
end

function UI_SetImage(name, state, tx, ty, tw, th, scale_x, scale_y, texture)
	CLU_Call("UI_SetImage", name, state,  tx, ty, tw, th, scale_x, scale_y, texture)
end

function UI_SetFrameImage(name, state, tx, ty, tw, th, scale_x, scale_y, texture)
	CLU_Call("UI_SetFrameImage", name, state,  tx, ty, tw, th, scale_x, scale_y, texture)
end

function UI_SetOpaque(name, opaque)
	CLU_Call("UI_SetOpaque", name, opaque)
end

function UI_SetAccessory(name, data)
	CLU_Call("UI_SetAccessory", name, data)
end

NORMAL  = 0
HOVER   = 1
DOWN    = 2
DISABLE = 3
ALL     = 4


-----------------------------------------------------------------------
-- 定义宏
-----------------------------------------------------------------------

-- 真假值
TRUE = 1
FALSE = 0

-- 控件显示方式
caLeft =1
caLeftUp =2
caUp = 3
caRightUp = 4
caRight = 5
caRightBottom = 6
caBottom = 7
caLeftBottom = 8
caClient = 9
caCenter  = 10          -- 完全居中
caWidthCenter = 11      -- 水平居中
caHeightCenter = 12     -- 上下居中 

-- 控件类型
LABEL_TYPE		= 0
LABELEX_TYPE		= 1
BUTTON_TYPE		= 2
COMBO_TYPE		= 3
EDIT_TYPE		= 4
IMAGE_TYPE		= 5
LIST_TYPE		= 6
PROGRESS_TYPE		= 7
CHECK_TYPE		= 8
CHECK_GROUP_TYPE 	= 9
GRID_TYPE		= 10
PAGE_TYPE		= 11
FIX_LIST_TYPE		= 12
CHECK_FIX_LIST_TYPE	= 13
DRAG_TITLE_TYPE		= 14
TREE_TYPE		= 15
IMAGE_FRAME_TYPE	= 16
UI3D_COMPENT_TYPE	= 17
MEMO_TYPE		= 18
MEMOEX_TYPE		= 19
GOODS_GRID_TYPE		= 20
FAST_COMMANG_TYPE	= 21
COMMAND_ONE_TYPE	= 22
IMAGE_FLASH_TYPE	= 23
SCROLL_TYPE		= 24
SKILL_LIST_TYPE		= 25
LISTEX_TYPE		= 26
MENU_TYPE		= 27
RICHMEMO_TYPE		= 28
TITLE_TYPE 		= 29
RICHEDIT_TYPE 		= 30 

UI3D_COMPENT = UI3D_COMPENT_TYPE

-- 颜色
COLOR_BLACK = 4278190080
COLOR_RED = 4294901760
COLOR_WHITE = 4294967295
COLOR_PURPLE = 4293990336		-- 紫色
COLOR_YELLOW = 4294967040           -- 黄色
COLOR_BLUE = 4278190335 --兰色
COLOR_GREEN = 4278255360 --绿色
COLOR_PINK = 4294902015  --粉色

COLOR_8D837A = 4287464314
COLOR_FFEDCF = 4294962639
COLOR_A29688 = 4288845448
COLOR_796C61 = 	4286147681
COLOR_C6B29F = 	4291211935
COLOR_968774 = 4288055156
COLOR_9A958D = 4288320909
COLOR_B1A58E = 4289832334
COLOR_C9C2B4 = 4291412660
COLOR_958273 = 4287988339
COLOR_FFF4E2 = 	4294964450

TREE_TEXT_COLOR = COLOR_WHITE


-- 按钮的四种状态，普通，激活，按下，禁用
NORMAL  = 0
HOVER   = 1
DOWN    = 2
DISABLE = 3

-- 背景图
COMPENT_BACK = 0		-- 控件背景

-- 进度条的两幅画
PROGRESS_PROGRESS = 1 		-- 进度条

-- 选择框的两幅画
UNCHECKED = 0			-- 未选择状态
CHECKED = 1			-- 选择状态

-- 进度条显示风格：
PROGRESS_HORIZONTAL = 0		-- 水平的,从左自右的
PROGRESS_VERTICAL = 1		-- 垂直的，从下直上的


-- 表单样式
-- 0 :普通; 1：全居中，2：x方向居中， 3 Y方向居中， 4：居左； 5：居右；6：居上；7 ：居下 ； 8 左上角，9 右上角，10 左下角 11 右下角
FORM_NONE=0			-- 普通
FORM_ALLCENTER=1		-- 全居中
FORM_XCENTER=2			-- x方向居中
FORM_YCENTER=3			-- Y方向居中
FORM_LEFT=4			-- 居左
FORM_RIGHT=5			-- 居右
FORM_TOP=6			-- 居上
FORM_BOTTOM=7			-- 居下
FORM_LEFTTOP=8			-- 左上角
FORM_RIGHTTOP=9			-- 右上角
FORM_LEFTBOTTOM=10		-- 左下角
FORM_RIGHTBOTTOM=11		-- 右下角


-----------------------------------------------------------------------
-- 定义要调用的函数
-----------------------------------------------------------------------
-- 返回值如未特殊说明，则为成功1，失败-1

-- 装载UI脚本
function UI_LoadScript( file )
	CLU_Call("UI_LoadScript", file )
end	

-- 创建表单，参数依次为：表单名称，是否模态，表单宽，高，X坐标，Y坐标，是否平铺显示，是否显示边线
-- 返回值：失败-1，成功为表单ID
function UI_CreateForm( name, ismodal, w, h, x, y, isTitle, isShowFrame )
	local id = CLU_Call("UI_CreateForm", name, ismodal, w, h, x, y, isTitle, isShowFrame )
	if id==-1 then 
 	    return nil
	end
	return id	
end

-- 设置表单是否可以按ESC关闭
function UI_FormSetIsEscClose( nFormID, IsEscClose )
	CLU_Call("UI_FormSetIsEscClose", nFormID, IsEscClose )
end

-- 设置表单按Enter时,执行那个按钮的事件
function UI_FormSetEnterButton( nFormID, nButtonID )
	CLU_Call("UI_FormSetEnterButton", nFormID, nButtonID )
end

ALT_KEY = 0
CTRL_KEY = 1
SHIFT_KEY = 2
-- 设置显示或隐藏Form的热键
function UI_FormSetHotKey( id, control_key, key )
	CLU_Call("UI_FormSetHotKey", id, control_key, key )
end

-- 设置Form模板最大值,必须大于零
function UI_SetFormTempleteMax( max )
	CLU_Call("UI_SetFormTempleteMax", max )
end

-- 将Form加入nTempleteNo模板中,nTempleteNo要小于max,大于等于零
function UI_AddFormToTemplete( formid, nTempleteNo )
	CLU_Call("UI_AddFormToTemplete", formid, nTempleteNo )
end

-- 将Form加入每一个nTempleteNo模板中
function UI_AddAllFormTemplete( form_id )
	CLU_Call("UI_AddAllFormTemplete", form_id )
end

-- 切换当前Form模板,如果nTempleteNo小于零,则切换到默认模板
function UI_SwitchTemplete( nTempleteNo )
	CLU_Call("UI_SwitchTemplete", nTempleteNo )
end

-- 装载form图片，client是平铺单元文件，cw,ch是平铺单元宽高，bw,bh是指边框单元的宽高，单位：像素
function UI_LoadFormImage( id, client, cw, ch, tx, ty, board, bw, bh )
	CLU_Call("UI_LoadFormImage", id, client, cw, ch, tx, ty, board, bw, bh )
end

-- 设定form的类型，居中，居下等.
--0 :普通; 1：全居中，2：x方向居中， 3 Y方向居中， 4：居左； 5：居右；6：居上；7 ：居下 ； 8 左上角，9 右上角，10 左下角 11 右下角
function UI_SetFormStyle( id, index )
	CLU_Call("UI_SetFormStyle", id, index)
end

-- 设定form的类型，居中，居下等.
--0 :普通; 1：全居中，2：x方向居中， 3 Y方向居中， 4：居左； 5：居右；6：居上；7 ：居下 ； 8 左上角，9 右上角，10 左下角 11 右下角
--offWidth 是相对于边的水平位置
--offHeight 是相对于边的垂直位置
function UI_SetFormStyleEx( id, index, offWidth, offHeight )
	CLU_Call("UI_SetFormStyleEx", id, index, offWidth, offHeight)
end

-- 装载FrameImage图片，client是平铺单元文件，cw,ch是平铺单元宽高，bw,bh是指边框单元的宽高，单位：像素
function UI_LoadFrameImage( id, client, cw, ch, tx, ty, board, bw, bh )
	CLU_Call("UI_LoadFrameImage", id, client, cw, ch, tx, ty, board, bw, bh )
end

-- 显示或隐藏表单：表单ID，是否显示
function UI_ShowForm( id, show )
	CLU_Call("UI_ShowForm", id, show )
end

-- 创建控件：所属表单，控件类型，控件名称，宽高，X,Y
-- 其中类型为：1-按钮，2-组合框，3-编辑框，4-图片，5-文本，6-列表
-- 返回值：失败-1，成功为控件ID
function UI_CreateCompent( formid, type, name, w, h, x, y )
	local ret = CLU_Call( "UI_CreateCompent", formid, type, name, w, h, x, y )
	if ret==-1 then 
 	    return nil
	end
	return ret
end

-- 设置控件（包括表单）是否可以拖动
function UI_SetIsDrag( id, isDrag )
	CLU_Call("UI_SetIsDrag", id, isDrag )
end

-- 设置控件提示
function UI_SetHint( id, hint )
	CLU_Call("UI_SetHint", id, hint )
end

-- 创建多行列表,失败返回-1
-- 其中style为标题风格
eSimpleTitle = 0		-- 简单标头,即仅一幅图片
eWindowTitle = 1		-- 象windows一样的标头,需要加载每一个标头的图片
eNoTitle     = 2 		-- 没有标题栏
function UI_CreateListView( formid, name, w, h, x, y, col, style )
	local ret = CLU_Call( "UI_CreateListView", formid, name, w, h, x, y, col, style )
	if ret==-1 then 
 	    return nil
	end
	return ret
end

-- 设置listview标头,参数依次为:id,设置的标头索引,标头宽底,标头图片,图片宽高起始坐标
function UI_ListViewSetTitle( listviewid, index, width, titleimage, w, h, sx, sy )
	CLU_Call( "UI_ListViewSetTitle", listviewid, index, width, titleimage, w, h, sx, sy )
end

-- 设置listview标头高度
function UI_ListViewSetTitleHeight( listviewid, height )
	CLU_Call( "UI_ListViewSetTitleHeight", listviewid, height )
end

-- 设置的选择条是否跟随鼠标
function UI_SetListIsMouseFollow( listid, IsFollow )
	CLU_Call( "UI_SetListIsMouseFollow", listid, IsFollow )
end

-- 设置控件携带参数,tag为整数
function UI_SetTag( id, tag )
	CLU_Call( "UI_SetTag", id, tag )
end

-- 设置控件大小
function UI_SetSize( id, w, h )
	CLU_Call( "UI_SetSize", id, w, h )
end

-- 设置控件位置
function UI_SetPos( id, x, y )
	CLU_Call( "UI_SetPos", id, x, y )
end

-- 设置控件是否响应键盘焦点
function UI_SetIsKeyFocus( id, IsKeyFocus )
	CLU_Call( "UI_SetIsKeyFocus", id, IsKeyFocus )
end

-- 设置控件的显示文字
function UI_SetCaption( id, caption )
	CLU_Call( "UI_SetCaption", id, caption )
end

-- 拷贝另一个控件的图片，参数：要拷贝
-- 返回值：成功1，失败-1
function UI_CopyImage( targetid, sourceid )
	CLU_Call( "UI_CopyImage", targetid, sourceid )
end

-- 设置控件的alpha,不透明为255,全透明为:0
function UI_SetAlpha( id, alpha )
	CLU_Call( "UI_SetAlpha", id, alpha )
end

-- 设置控件的背景alpha,不透明为255,全透明为:0
function UI_SetImageAlpha( id, alpha )
	CLU_Call( "UI_SetImageAlpha", id, alpha )
end

-- 设置控件显示方式
function UI_SetAlign( id, align )
	CLU_Call( "UI_SetAlign", id, align )
end

-- 设置是否显示控件
function UI_SetIsShow( id, isshow )
	CLU_Call( "UI_SetIsShow", id, isshow )
end

-- 设置控件是否可用
function UI_SetIsEnabled( id, isEnabled )
	CLU_Call( "UI_SetIsEnabled", id, isEnabled )
end

-- 设置控件离四周的边距
function UI_SetMargin( id, left, top, right, bottom )
	CLU_Call( "UI_SetMargin", id, left, top, right, bottom )
end

-- 设置说话的颜色，依次为：世界,路人,队聊,公会,GM,系统,交易,私聊
function UI_SetChatColor( p1, p2, p3, p4, p5, p6, p7, p8 )
	CLU_Call( "UI_SetChatColor", p1, p2, p3, p4, p5, p6, p7, p8 )
end

-- 装载控件的图片，控件id，图片名称，第几幅，图片宽，高，图片开始X,Y
function UI_LoadImage( id, file, frame, w, h, tx, ty )
	CLU_Call( "UI_LoadImage", id, file, frame, w, h, tx, ty )
end

-- 设置控件的背景图片帧数
function UI_SetMaxImage( id, max )
	CLU_Call( "UI_SetMaxImage", id, max )
end

-- 装载控件的图片(有固定比例)，控件id，图片名称，第几幅，图片宽，高，图片开始X,Y
function UI_LoadScaleImage( id, file, frame, w, h, tx, ty, scalex, scaley )
	CLU_Call( "UI_LoadScaleImage", id, file, frame, w, h, tx, ty, scalex, scaley )
end


-- 装载控件的图片(有固定比例)，控件id，图片名称，第几幅，图片宽，高，图片开始X,Y
function UI_LoadFlashScaleImage( id, flash, file, frame, w, h, tx, ty, scalex, scaley )
	CLU_Call( "UI_LoadFlashScaleImage", id, flash, file, frame, w, h, tx, ty, scalex, scaley )
end

-- 装载SkillList的升级按钮图片
function UI_LoadSkillListButtonImage( id, file, w, h, sx, sy, item_w, item_h )
	CLU_Call( "UI_LoadSkillListButtonImage", id, file, w, h, sx, sy, item_w, item_h )
end

-- 装载按钮的图片
function UI_LoadButtonImage( id, file, w, h, sx, sy, isHorizontal )
	CLU_Call( "UI_LoadButtonImage", id, file, w, h, sx, sy, isHorizontal )
end

BUTTON_NONE  	= 0
BUTTON_CLOSE	= 1
BUTTON_YES	= 2
BUTTON_NO	= 3
BUTTON_OK	= 4
BUTTON_CANCLE	= 5

-- 设置按钮的返回值
function UI_SetButtonModalResult( id, modal )
	CLU_Call( "UI_SetButtonModalResult", id, modal )
end


-- 设置按钮的Hint
function UI_ButtonSetHint( id, strHint )
	CLU_Call( "UI_ButtonSetHint", id, strHint )
end

-- 获得combo或list的scroll，用于加载scroll的图片，设置大小
function UI_GetScroll( id )
	local ret = CLU_Call( "UI_GetScroll", id )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 获得combo或者CListView的list
function UI_GetList( id )
	local ret = CLU_Call( "UI_GetList", id )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 装载表格的选择条
function UI_GridLoadSelectImage( id, file, w, h, tx, ty )
	CLU_Call( "UI_GridLoadSelectImage", id, file, w, h, tx, ty )
end

-- 设置表格是否可以拖动左下角变大变小
function UI_SetGridIsDragSize( id, IsEnabled )
	CLU_Call( "UI_SetGridIsDragSize", id, IsEnabled )
end

-- 得到滚动条中的对象:up按钮,down按钮,scroll图片
SCROLL_UP = 0
SCROLL_DOWN = 1
SCROLL_SCROLL = 2
function UI_GetScrollObj( id, scrolltype )
	local ret = CLU_Call( "UI_GetScrollObj", id, scrolltype )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 装载combo的图片：edit为输入栏背景文件，w,h为对应宽高,ex,ey图片位置,button为右边按钮背景文件，bw,bh为按钮宽高,bx,by为图片位置,isHorizontal为图片是否水平排列
function UI_LoadComboImage( id, edit, ew, eh, ex, ey, button, bw, bh, bx, by, isHorizontal )
	CLU_Call( "UI_LoadComboImage", id, edit, ew, eh, ex, ey, button, bw, bh, bx, by, isHorizontal )
end

-- 设置combo的list向上,还是向下
function UI_ComboSetStyle( id, IsDown )
	CLU_Call( "UI_ComboSetStyle", id, IsDown )
end

-- 设置combo的text文字颜色
function UI_ComboSetTextColor( id, color )
	CLU_Call( "UI_ComboSetTextColor", id, color )
end

-- 装载FixList的选择框图象
function UI_LoadListFixSelect( id, imagefile, w, h, sx, sy )
	CLU_Call( "UI_LoadListFixSelect", id, imagefile, w, h, sx, sy )
end

-- 拷贝另一个控件的所有状态，如果不是同类型控件，拷贝会失败
function UI_CopyCompent( targetid, sourceid )
	CLU_Call( "UI_CopyCompent", targetid, sourceid )
end

-- 增加list的文本
function UI_AddListText( id, text )
	CLU_Call( "UI_AddListText", id, text )
end

-- 加载List中选择条背景图片
function UI_ListLoadSelectImage( id, file, w, h, sx, sy )
	CLU_Call( "UI_ListLoadSelectImage", id, file, w, h, sx, sy )
end

-- 加载List中项目条背景图片
function UI_LoadListItemImage( id, file, w, h, sx, sy, item_w, item_h )
	CLU_Call( "UI_LoadListItemImage", id, file, w, h, sx, sy, item_w, item_h )
end

-- 设置List中每一个Item的边距
function UI_ListSetItemMargin( id, left, top )
	CLU_Call( "UI_ListSetItemMargin", id, left, top )
end

-- 设置List中每一个Item的背景图边距
function UI_ListSetItemImageMargin( id, left, top )
	CLU_Call( "UI_ListSetItemImageMargin", id, left, top )
end

-- 增加list的文本(带进度条),prgress为参数,0.0~1.0
function UI_AddListBarText( id, text, prgress )
	CLU_Call( "UI_AddListBarText", id, text, prgress )
end

-- 设置List的文字背景色以及选择时的颜色
function UI_SetListFontColor( listid, nBackColor, nSelectColor )
	CLU_Call( "UI_SetListFontColor", listid, nBackColor, nSelectColor )
end


-- 设置List行高
function UI_SetListRowHeight( id, height )
	CLU_Call( "UI_SetListRowHeight", id, height )
end

-- 增加checkbox到组中
function UI_AddGroupBox( id, checkbox )
	CLU_Call( "UI_AddGroupBox", id, checkbox )
end

	
-- 设置进度条显示风格
function UI_SetProgressStyle( id, style )
	CLU_Call( "UI_SetProgressStyle", id, style )
end

PROGRESS_HINT_NUM = 0
PROGRESS_HINT_PERCENT = 1
-- 设置进度条提示风格显示风格
function UI_SetProgressHintStyle( id, style )
	CLU_Call( "UI_SetProgressHintStyle", id, style )
end

function UI_SetProgressActiveMouse( id, style )
	CLU_Call( "UI_SetProgressActiveMouse", id, style )
end


-- 设置滚动轴显示风格
function UI_SetScrollStyle( id, style )
	CLU_Call( "UI_SetScrollStyle", id, style )
end

-- 设置输入框最大输入字数,单位:byte
function UI_SetEditMaxNum( id, num )
	CLU_Call( "UI_SetEditMaxNum", id, num )
end

-- 设置输入框光标颜色
function UI_SetEditCursorColor( id, color )
	CLU_Call( "UI_SetEditCursorColor", id, color )
end

-- 设置输入框回车时响应的按钮
function UI_SetEditEnterButton( nEditID, nButtonID )
	CLU_Call( "UI_SetEditEnterButton", nEditID, nButtonID )
end

-- 设置输入框最大输入字数,单位:byte
function UI_SetEditMaxNumVisible( id, num )
	CLU_Call( "UI_SetEditMaxNumVisible", id, num )
end

-- 设置控件字体颜色
function UI_SetTextColor( id, color )
	CLU_Call( "UI_SetTextColor", id, color )
end

-- 设置grid单元间距,默认为2
function UI_SetGridSpace( id, x, y )
	CLU_Call( "UI_SetGridSpace", id, x, y )
end

-- 设置grid容量,参数都不能为零
function UI_SetGridContent( id, nRow, nCol )
	CLU_Call( "UI_SetGridContent", id, nRow, nCol )
end

-- 设置GoodGrid中的单元格背景
function UI_GoodGridLoadUnitImage( id, file, w, h, tx, ty )
	CLU_Call( "UI_GoodGridLoadUnitImage", id, file, w, h, tx, ty )
end

-- 设置grid单元宽高,如果不设置,则为40
function UI_SetGridUnitSize( id, w, h )
	CLU_Call( "UI_SetGridUnitSize", id, w, h )
end

-- 增加表情到Grid中,其中frame为表情动画帧数
function UI_AddFaceToGrid( id, file, w, h, sx, sy, frame, nTag )
	CLU_Call( "UI_AddFaceToGrid", id, file, w, h, sx, sy, frame, nTag )
end

-- 设置最大行数
function UI_FixListSetMaxNum( id, num )
	CLU_Call( "UI_FixListSetMaxNum", id, num )
end

-- 设定每行显示的英文字数
function UI_SetMemoMaxNumPerRow(id, num) 
    CLU_Call( "UI_SetMemoMaxNumPerRow", id, num )
end

-- 设定Memo每页显示的行数
function UI_SetMemoPageShowNum(id, num) 
    CLU_Call( "UI_SetMemoPageShowNum", id, num )
end

-- 设定Memo每行显示的高度
function UI_SetMemoRowHeight(id, num) 
    CLU_Call( "UI_SetMemoRowHeight", id, num )
end

-- 设置Rich的裁剪区
function UI_RichSetClipRect(id, x0, y0, x1, y1) 
    CLU_Call( "UI_RichSetClipRect", id, x0, y0, x1, y1 )
end

-- 设置Rich的最大容纳行数
function UI_RichSetMaxLine(id, line) 
    CLU_Call( "UI_RichSetMaxLine", id, line )
end

-- 设置每一行对应的文本
function UI_FixListSetText( id, index, text )
	CLU_Call( "UI_FixListSetText", id, index, text )
end

-- 设置行距
function UI_FixListSetRowSpace( id, height )
	CLU_Call( "UI_FixListSetRowSpace", id, height )
end

-- 设置CheckFixList中Check的显示边距
function UI_CheckFixListSetCheckMargin( id, left, top )
	CLU_Call( "UI_CheckFixListSetCheckMargin", id, left, top )
end

function UI_LoadCheckFixListCheck( id, checkimage, cw, ch, csx, csy, uncheckimage, uw, uh, usx, usy )
	CLU_Call( "UI_LoadCheckFixListCheck", id, checkimage, cw, ch, csx, csy, uncheckimage, uw, uh, usx, usy )
end

enumTreeAddImage = 0
enumTreeSubImage = 1
-- 装载树型控件图片,nType为装载是那张图片,图片大小建议16x16,显示宽高itemw,itemh
function UI_TreeLoadImage( nTreeID, nType, imagefile, w, h, sx, sy, itemw, itemh )
	CLU_Call( "UI_TreeLoadImage", nTreeID, nType, imagefile, w, h, sx, sy, itemw, itemh )
end

-- 创建一个文本Item,用于放入treenode中
function UI_CreateTextItem( text, color )
	local ret = CLU_Call( "UI_CreateTextItem", text, color )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 创建一个图象Item,用于放入treenode中
function UI_CreateGraphItem( file, w, h, sx, sy, frame )
	local ret = CLU_Call( "UI_CreateGraphItem", file, w, h, sx, sy, frame )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 创建一个带背景的Item,用于放入treenode中
function UI_CreateNoteGraphItem( file, w, h, sx, sy, frame, text, textx, texty )
	local ret = CLU_Call( "UI_CreateNoteGraphItem", file, w, h, sx, sy, frame, text, textx, texty )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 创建一个单个treenode,参数依次为:treeid,已经创建的item,父节点id(为-1,则直接插入到根节点中)
function UI_CreateSingleNode( treeid, itemid, nodeid_parent )
	local ret = CLU_Call( "UI_CreateSingleNode", treeid, itemid, nodeid_parent )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 创建一个表格式的treenode,参数依次为:treeid,每行列数,单元宽高,父节点id(为-1,则直接插入到根节点中)
function UI_CreateGridNode( treeid, itemid, maxcol, uw, uh, nodeid_parent )
	local ret = CLU_Call( "UI_CreateGridNode", treeid, itemid, maxcol, uw, uh, nodeid_parent )
	if ret==-1 then 
 	    return nil
	end
	return ret	
end

-- 创建一个Graph
function UI_CreateGraphItemTex( tx, ty, tw, th, scale_x, scale_y, nTextureID, nTag )
	local ret = CLU_Call( "UI_CreateGraphItemTex", tx, ty, tw, th, scale_x, scale_y, nTextureID, nTag )
	if ret==-1 then 
 	    return nil
	end
	return ret
end


-- 将itemid加入到nodeid中
function UI_GridNodeAddItem( nodeid, itemid )
	CLU_Call( "UI_GridNodeAddItem", nodeid, itemid )
end

-- 在Page对象中创建一个PageItem对象
function UI_CreatePageItem( page_id )
	local ret = CLU_Call( "UI_CreatePageItem", page_id )
	if ret==-1 then 
 	    return nil
	end
	return ret
end

-- 设置一个Page的点击按钮摆放方式以及单元宽高
PAGE_BUTTON_LEFT_UP=0		-- 依次摆在左上
PAGE_BUTTON_FULL_UP=1		-- 充满上部
PAGE_BUTTON_CUSTOM =2		-- 自定
function UI_SetPageButton( page_id, button_style, bw, bh )
	CLU_Call( "UI_SetPageButton", page_id, button_style, bw, bh )
end

-- 获得PageItem中的对象
PAGE_ITEM_IMAGE=0
PAGE_ITEM_TITLE=1	
function UI_GetPageItemObj( page_item_id, type )
	local ret = CLU_Call( "UI_GetPageItemObj", page_item_id, type )
	if ret==-1 then 
 	    return nil
	end
	return ret
end

-- 装载PAGE_ITEM_TITLE中图片时的两种状态
PAGE_ITEM_TITLE_NORMAL=0
PAGE_ITEM_TITLE_ACTIVE=1

-- 将一个对象加入到一个容器中
function UI_AddCompent( container_id, compent_id )
	CLU_Call( "UI_AddCompent", container_id, compent_id )
end

-- 设置扩展Label的阴影背景颜色
function UI_SetLabelExShadowColor( label_id, color )
	CLU_Call( "UI_SetLabelExShadowColor", label_id, color )
end

-- 拖动时对齐的表格的单元宽高
function UI_SetDragSnapToGrid( nGridWidth, nGridHeight )
	CLU_Call( "UI_SetDragSnapToGrid", nGridWidth, nGridHeight )
end

-- 建立文字与图象的映射,nIndex是索引,后面是图片
function UI_SetTextParse( nIndex, file, w, h, sx, sy, frame )
	CLU_Call( "UI_SetTextParse", nIndex, file, w, h, sx, sy, frame )
end

-- 装载带进度条的文字的进度条
function UI_ItemBarLoadImage( file, w, h, tx, ty )
	CLU_Call( "UI_ItemBarLoadImage", file, w, h, tx, ty )
end

-- 装载菜单背景图片
function UI_MenuLoadImage( id, IsShowFrame, IsTitle, clientfile, cw, ch, tx, ty, framefile, w, h )
	CLU_Call( "UI_MenuLoadImage", id, IsShowFrame, IsTitle, clientfile, cw, ch, tx, ty, framefile, w, h )
end

-- 装载菜单选择条的图片
function UI_MenuLoadSelect( menuid, imagefile, w, h, tx, ty )
	CLU_Call( "UI_MenuLoadSelect", menuid, imagefile, w, h, tx, ty )
end

-- 增加菜单
function UI_MenuAddText( id, text )
	CLU_Call( "UI_MenuAddText", id, text )
end

-- 增加用于用户名的过滤字符
function UI_AddFilterTextToNameTable(text )
	CLU_Call( "UI_AddFilterTextToNameTable",text )
end

-- 增加用于聊天内容的过滤字符
function UI_AddFilterTextToDialogTable(text )
	CLU_Call( "UI_AddFilterTextToDialogTable",text )
end

-- 改变头顶上聊天时的背景颜色
function UI_SetHeadSayBkgColor( color )
	CLU_Call( "UI_SetHeadSayBkgColor", color )
end

-- 设置Title的字体以及颜色
function UI_SetTitleFont( id, font, color, height )
	CLU_Call( "UI_SetTitleFont", id, font, color, height )
end

-- 设置扩展Label的字体,以及是否显示阴影
function UI_SetLabelExFont( id, nFontIndex, IsShadow, dwShadowColor )
	CLU_Call("UI_SetLabelExFont", id, nFontIndex, IsShadow, dwShadowColor )
end

-- 装载技能激活时的边框
function UI_LoadSkillActiveImage( file, maxframe, w, h, sx, sy )
	CLU_Call("UI_LoadSkillActiveImage", file, maxframe, w, h, sx, sy )
end

-- 装载贝壳充电的图片
function UI_LoadChargeImage( link, file, maxframe, w, h, sx, sy )
	CLU_Call("UI_LoadChargeImage", link, file, maxframe, w, h, sx, sy )
end

function UI_SetBackground(frm)
	imgBlackBackground = UI_CreateCompent( frm, IMAGE_TYPE, "imgBlackBackground", 1198+3000, 768+3000, -1500, -1000 )
	UI_LoadImage( imgBlackBackground, "texture/gui/black-pixel-background.png", NORMAL, 1, 1, 0, 0 )
end

function UI_SetFontSize_Cmd( id, nFontIndex )
	CLU_Call("UI_SetFontSize_Cmd", id, nFontIndex )
end

UI_ItemBarLoadImage( "texture/ui/system/progress.tga", 64, 16, 0, 0 )


-- ASCII速查表,用于快捷键
HOTKEY_A  = 65
HOTKEY_B  = 66
HOTKEY_C  = 67
HOTKEY_D  = 68
HOTKEY_E  = 69
HOTKEY_F  = 70
HOTKEY_G  = 71
HOTKEY_H  = 72
HOTKEY_I  = 73
HOTKEY_J  = 74
HOTKEY_K  = 75
HOTKEY_L  = 76
HOTKEY_M  = 77
HOTKEY_N  = 78
HOTKEY_O  = 79
HOTKEY_P  = 80
HOTKEY_Q  = 81
HOTKEY_R  = 82
HOTKEY_S  = 83
HOTKEY_T  = 84
HOTKEY_U  = 85
HOTKEY_V  = 86
HOTKEY_W  = 87
HOTKEY_X  = 88
HOTKEY_Y  = 89
HOTKEY_Z  = 90

UI_SetDragSnapToGrid( 4, 4 )

-- 声明所有的表单模板，用于模板切换,对应于程序UITemplete.h
FORM_LOGIN = 0
FORM_MAIN = 1
FORM_SELECT_CHA = 2
FORM_EDITOR = 3
FORM_SWITCH_SCENE = 4
FORM_CREATE_CHA = 5
FORM_SELECT = 6
UI_SetFormTempleteMax( 7 )	-- 设置最大模板数

FORM_DIALOG = FORM_SWITCH_SCENE	-- 对话框模板-4

-- 装载相关界面脚本
UI_LoadScript("scripts/lua/forms/main.clu")
--UI_LoadScript("scripts/lua/forms/selectcha.clu")
UI_LoadScript("scripts/lua/forms/login.clu")
UI_LoadScript("scripts/lua/forms/loading.clu")
UI_LoadScript("scripts/lua/forms/NPC.clu")
UI_LoadScript("scripts/lua/forms/Player.clu")
--UI_LoadScript("scripts/lua/textparse.clu")

UI_LoadScript("scripts/lua/forms/minimap.clu")	-- 小地图
UI_LoadScript("scripts/lua/forms/help.clu")		-- 帮助
UI_LoadScript("scripts/lua/forms/system.clu")	-- 系统
UI_LoadScript("scripts/lua/forms/equip.clu")	-- 技能,道具
UI_LoadScript("scripts/lua/forms/chat.clu")		-- 聊天
UI_LoadScript("scripts/lua/forms/preperty.clu")	-- 角色属性
UI_LoadScript("scripts/lua/forms/mission.clu")	-- 任务
UI_LoadScript("scripts/lua/forms/coze.clu")		-- 左下角的聊天
UI_LoadScript("scripts/lua/forms/dialog.clu")	-- 常用对话框
UI_LoadScript("scripts/lua/forms/ship.clu")		-- 造船
UI_LoadScript("scripts/lua/forms/traderoom.clu")	-- 交易所
UI_LoadScript("scripts/lua/forms/manage.clu")	-- 公会管理
UI_LoadScript("scripts/lua/forms/select.clu")

--字符过滤表
UI_LoadScript("scripts/lua/filter.clu")